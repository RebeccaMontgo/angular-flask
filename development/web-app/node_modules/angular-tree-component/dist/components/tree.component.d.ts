import { OnChanges, TemplateRef } from '@angular/core';
import { TreeModel } from '../models/tree.model';
import { TreeDraggedElement } from '../models/tree-dragged-element.model';
import { TreeOptions } from '../models/tree-options.model';
import { TreeViewportComponent } from './tree-viewport.component';
import * as ɵngcc0 from '@angular/core';
export declare class TreeComponent implements OnChanges {
    treeModel: TreeModel;
    treeDraggedElement: TreeDraggedElement;
    _nodes: any[];
    _options: TreeOptions;
    loadingTemplate: TemplateRef<any>;
    treeNodeTemplate: TemplateRef<any>;
    treeNodeWrapperTemplate: TemplateRef<any>;
    treeNodeFullTemplate: TemplateRef<any>;
    viewportComponent: TreeViewportComponent;
    nodes: any[];
    options: TreeOptions;
    focused: boolean;
    state: any;
    toggleExpanded: any;
    activate: any;
    deactivate: any;
    nodeActivate: any;
    nodeDeactivate: any;
    select: any;
    deselect: any;
    focus: any;
    blur: any;
    updateData: any;
    initialized: any;
    moveNode: any;
    copyNode: any;
    loadNodeChildren: any;
    changeFilter: any;
    event: any;
    stateChange: any;
    constructor(treeModel: TreeModel, treeDraggedElement: TreeDraggedElement);
    onKeydown($event: any): void;
    onMousedown($event: any): void;
    ngOnChanges(changes: any): void;
    sizeChanged(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeComponent, "Tree, tree-root", never, { "nodes": "nodes"; "options": "options"; "focused": "focused"; "state": "state"; }, { "toggleExpanded": "toggleExpanded"; "activate": "activate"; "deactivate": "deactivate"; "nodeActivate": "nodeActivate"; "nodeDeactivate": "nodeDeactivate"; "select": "select"; "deselect": "deselect"; "focus": "focus"; "blur": "blur"; "updateData": "updateData"; "initialized": "initialized"; "moveNode": "moveNode"; "copyNode": "copyNode"; "loadNodeChildren": "loadNodeChildren"; "changeFilter": "changeFilter"; "event": "event"; "stateChange": "stateChange"; }, ["loadingTemplate", "treeNodeTemplate", "treeNodeWrapperTemplate", "treeNodeFullTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidHJlZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS5tb2RlbCc7XG5pbXBvcnQgeyBUcmVlRHJhZ2dlZEVsZW1lbnQgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS1kcmFnZ2VkLWVsZW1lbnQubW9kZWwnO1xuaW1wb3J0IHsgVHJlZU9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS1vcHRpb25zLm1vZGVsJztcbmltcG9ydCB7IFRyZWVWaWV3cG9ydENvbXBvbmVudCB9IGZyb20gJy4vdHJlZS12aWV3cG9ydC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHJlZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgdHJlZU1vZGVsOiBUcmVlTW9kZWw7XG4gICAgdHJlZURyYWdnZWRFbGVtZW50OiBUcmVlRHJhZ2dlZEVsZW1lbnQ7XG4gICAgX25vZGVzOiBhbnlbXTtcbiAgICBfb3B0aW9uczogVHJlZU9wdGlvbnM7XG4gICAgbG9hZGluZ1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHRyZWVOb2RlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdHJlZU5vZGVXcmFwcGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdHJlZU5vZGVGdWxsVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdmlld3BvcnRDb21wb25lbnQ6IFRyZWVWaWV3cG9ydENvbXBvbmVudDtcbiAgICBub2RlczogYW55W107XG4gICAgb3B0aW9uczogVHJlZU9wdGlvbnM7XG4gICAgZm9jdXNlZDogYm9vbGVhbjtcbiAgICBzdGF0ZTogYW55O1xuICAgIHRvZ2dsZUV4cGFuZGVkOiBhbnk7XG4gICAgYWN0aXZhdGU6IGFueTtcbiAgICBkZWFjdGl2YXRlOiBhbnk7XG4gICAgbm9kZUFjdGl2YXRlOiBhbnk7XG4gICAgbm9kZURlYWN0aXZhdGU6IGFueTtcbiAgICBzZWxlY3Q6IGFueTtcbiAgICBkZXNlbGVjdDogYW55O1xuICAgIGZvY3VzOiBhbnk7XG4gICAgYmx1cjogYW55O1xuICAgIHVwZGF0ZURhdGE6IGFueTtcbiAgICBpbml0aWFsaXplZDogYW55O1xuICAgIG1vdmVOb2RlOiBhbnk7XG4gICAgY29weU5vZGU6IGFueTtcbiAgICBsb2FkTm9kZUNoaWxkcmVuOiBhbnk7XG4gICAgY2hhbmdlRmlsdGVyOiBhbnk7XG4gICAgZXZlbnQ6IGFueTtcbiAgICBzdGF0ZUNoYW5nZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKHRyZWVNb2RlbDogVHJlZU1vZGVsLCB0cmVlRHJhZ2dlZEVsZW1lbnQ6IFRyZWVEcmFnZ2VkRWxlbWVudCk7XG4gICAgb25LZXlkb3duKCRldmVudDogYW55KTogdm9pZDtcbiAgICBvbk1vdXNlZG93bigkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBzaXplQ2hhbmdlZCgpOiB2b2lkO1xufVxuIl19