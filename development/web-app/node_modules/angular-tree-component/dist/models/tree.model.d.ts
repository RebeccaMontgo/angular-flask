import { OnDestroy } from '@angular/core';
import { TreeNode } from './tree-node.model';
import { TreeOptions } from './tree-options.model';
import { TreeVirtualScroll } from './tree-virtual-scroll.model';
import { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';
import * as ɵngcc0 from '@angular/core';
export declare class TreeModel implements ITreeModel, OnDestroy {
    static focusedTree: any;
    options: TreeOptions;
    nodes: any[];
    eventNames: string[];
    virtualScroll: TreeVirtualScroll;
    roots: TreeNode[];
    expandedNodeIds: IDTypeDictionary;
    selectedLeafNodeIds: IDTypeDictionary;
    activeNodeIds: IDTypeDictionary;
    hiddenNodeIds: IDTypeDictionary;
    focusedNodeId: IDType;
    virtualRoot: TreeNode;
    private firstUpdate;
    private events;
    private subscriptions;
    fireEvent(event: any): void;
    subscribe(eventName: any, fn: any): void;
    getFocusedNode(): TreeNode;
    getActiveNode(): TreeNode;
    getActiveNodes(): TreeNode[];
    getVisibleRoots(): TreeNode[];
    getFirstRoot(skipHidden?: boolean): TreeNode;
    getLastRoot(skipHidden?: boolean): TreeNode;
    readonly isFocused: boolean;
    isNodeFocused(node: any): boolean;
    isEmptyTree(): boolean;
    readonly focusedNode: any;
    readonly expandedNodes: any[];
    readonly activeNodes: any[];
    readonly hiddenNodes: any[];
    readonly selectedLeafNodes: any[];
    getNodeByPath(path: any[], startNode?: any): TreeNode;
    getNodeById(id: any): any;
    getNodeBy(predicate: any, startNode?: any): any;
    isExpanded(node: any): boolean;
    isHidden(node: any): boolean;
    isActive(node: any): boolean;
    isSelected(node: any): boolean;
    ngOnDestroy(): void;
    dispose(): void;
    unsubscribeAll(): void;
    setData({ nodes, options, events }: {
        nodes: any;
        options: any;
        events: any;
    }): void;
    update(): void;
    setFocusedNode(node: any): void;
    setFocus(value: any): void;
    doForAll(fn: any): void;
    focusNextNode(): void;
    focusPreviousNode(): void;
    focusDrillDown(): void;
    focusDrillUp(): void;
    setActiveNode(node: any, value: any, multi?: boolean): void;
    setSelectedNode(node: any, value: any): void;
    setExpandedNode(node: any, value: any): void;
    expandAll(): void;
    collapseAll(): void;
    setIsHidden(node: any, value: any): void;
    setHiddenNodeIds(nodeIds: any): void;
    performKeyAction(node: any, $event: any): boolean;
    filterNodes(filter: any, autoShow?: boolean): void;
    clearFilter(): void;
    moveNode(node: any, to: any): void;
    copyNode(node: any, to: any): void;
    getState(): {
        expandedNodeIds: IDTypeDictionary;
        selectedLeafNodeIds: IDTypeDictionary;
        activeNodeIds: IDTypeDictionary;
        hiddenNodeIds: IDTypeDictionary;
        focusedNodeId: IDType;
    };
    setState(state: any): void;
    subscribeToState(fn: any): void;
    canMoveNode(node: any, to: any, fromIndex?: any): boolean;
    calculateExpandedNodes(): void;
    private _filterNode;
    private _calculateExpandedNodes;
    private _setActiveNodeSingle;
    private _setActiveNodeMulti;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeModel, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TreeModel>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5tb2RlbC5kLnRzIiwic291cmNlcyI6WyJ0cmVlLm1vZGVsLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyZWVOb2RlIH0gZnJvbSAnLi90cmVlLW5vZGUubW9kZWwnO1xuaW1wb3J0IHsgVHJlZU9wdGlvbnMgfSBmcm9tICcuL3RyZWUtb3B0aW9ucy5tb2RlbCc7XG5pbXBvcnQgeyBUcmVlVmlydHVhbFNjcm9sbCB9IGZyb20gJy4vdHJlZS12aXJ0dWFsLXNjcm9sbC5tb2RlbCc7XG5pbXBvcnQgeyBJVHJlZU1vZGVsLCBJRFR5cGUsIElEVHlwZURpY3Rpb25hcnkgfSBmcm9tICcuLi9kZWZzL2FwaSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmVlTW9kZWwgaW1wbGVtZW50cyBJVHJlZU1vZGVsLCBPbkRlc3Ryb3kge1xuICAgIHN0YXRpYyBmb2N1c2VkVHJlZTogYW55O1xuICAgIG9wdGlvbnM6IFRyZWVPcHRpb25zO1xuICAgIG5vZGVzOiBhbnlbXTtcbiAgICBldmVudE5hbWVzOiBzdHJpbmdbXTtcbiAgICB2aXJ0dWFsU2Nyb2xsOiBUcmVlVmlydHVhbFNjcm9sbDtcbiAgICByb290czogVHJlZU5vZGVbXTtcbiAgICBleHBhbmRlZE5vZGVJZHM6IElEVHlwZURpY3Rpb25hcnk7XG4gICAgc2VsZWN0ZWRMZWFmTm9kZUlkczogSURUeXBlRGljdGlvbmFyeTtcbiAgICBhY3RpdmVOb2RlSWRzOiBJRFR5cGVEaWN0aW9uYXJ5O1xuICAgIGhpZGRlbk5vZGVJZHM6IElEVHlwZURpY3Rpb25hcnk7XG4gICAgZm9jdXNlZE5vZGVJZDogSURUeXBlO1xuICAgIHZpcnR1YWxSb290OiBUcmVlTm9kZTtcbiAgICBwcml2YXRlIGZpcnN0VXBkYXRlO1xuICAgIHByaXZhdGUgZXZlbnRzO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBmaXJlRXZlbnQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc3Vic2NyaWJlKGV2ZW50TmFtZTogYW55LCBmbjogYW55KTogdm9pZDtcbiAgICBnZXRGb2N1c2VkTm9kZSgpOiBUcmVlTm9kZTtcbiAgICBnZXRBY3RpdmVOb2RlKCk6IFRyZWVOb2RlO1xuICAgIGdldEFjdGl2ZU5vZGVzKCk6IFRyZWVOb2RlW107XG4gICAgZ2V0VmlzaWJsZVJvb3RzKCk6IFRyZWVOb2RlW107XG4gICAgZ2V0Rmlyc3RSb290KHNraXBIaWRkZW4/OiBib29sZWFuKTogVHJlZU5vZGU7XG4gICAgZ2V0TGFzdFJvb3Qoc2tpcEhpZGRlbj86IGJvb2xlYW4pOiBUcmVlTm9kZTtcbiAgICByZWFkb25seSBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gICAgaXNOb2RlRm9jdXNlZChub2RlOiBhbnkpOiBib29sZWFuO1xuICAgIGlzRW1wdHlUcmVlKCk6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZm9jdXNlZE5vZGU6IGFueTtcbiAgICByZWFkb25seSBleHBhbmRlZE5vZGVzOiBhbnlbXTtcbiAgICByZWFkb25seSBhY3RpdmVOb2RlczogYW55W107XG4gICAgcmVhZG9ubHkgaGlkZGVuTm9kZXM6IGFueVtdO1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkTGVhZk5vZGVzOiBhbnlbXTtcbiAgICBnZXROb2RlQnlQYXRoKHBhdGg6IGFueVtdLCBzdGFydE5vZGU/OiBhbnkpOiBUcmVlTm9kZTtcbiAgICBnZXROb2RlQnlJZChpZDogYW55KTogYW55O1xuICAgIGdldE5vZGVCeShwcmVkaWNhdGU6IGFueSwgc3RhcnROb2RlPzogYW55KTogYW55O1xuICAgIGlzRXhwYW5kZWQobm9kZTogYW55KTogYm9vbGVhbjtcbiAgICBpc0hpZGRlbihub2RlOiBhbnkpOiBib29sZWFuO1xuICAgIGlzQWN0aXZlKG5vZGU6IGFueSk6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RlZChub2RlOiBhbnkpOiBib29sZWFuO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZGlzcG9zZSgpOiB2b2lkO1xuICAgIHVuc3Vic2NyaWJlQWxsKCk6IHZvaWQ7XG4gICAgc2V0RGF0YSh7IG5vZGVzLCBvcHRpb25zLCBldmVudHMgfToge1xuICAgICAgICBub2RlczogYW55O1xuICAgICAgICBvcHRpb25zOiBhbnk7XG4gICAgICAgIGV2ZW50czogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xuICAgIHNldEZvY3VzZWROb2RlKG5vZGU6IGFueSk6IHZvaWQ7XG4gICAgc2V0Rm9jdXModmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgZG9Gb3JBbGwoZm46IGFueSk6IHZvaWQ7XG4gICAgZm9jdXNOZXh0Tm9kZSgpOiB2b2lkO1xuICAgIGZvY3VzUHJldmlvdXNOb2RlKCk6IHZvaWQ7XG4gICAgZm9jdXNEcmlsbERvd24oKTogdm9pZDtcbiAgICBmb2N1c0RyaWxsVXAoKTogdm9pZDtcbiAgICBzZXRBY3RpdmVOb2RlKG5vZGU6IGFueSwgdmFsdWU6IGFueSwgbXVsdGk/OiBib29sZWFuKTogdm9pZDtcbiAgICBzZXRTZWxlY3RlZE5vZGUobm9kZTogYW55LCB2YWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXRFeHBhbmRlZE5vZGUobm9kZTogYW55LCB2YWx1ZTogYW55KTogdm9pZDtcbiAgICBleHBhbmRBbGwoKTogdm9pZDtcbiAgICBjb2xsYXBzZUFsbCgpOiB2b2lkO1xuICAgIHNldElzSGlkZGVuKG5vZGU6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgc2V0SGlkZGVuTm9kZUlkcyhub2RlSWRzOiBhbnkpOiB2b2lkO1xuICAgIHBlcmZvcm1LZXlBY3Rpb24obm9kZTogYW55LCAkZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgZmlsdGVyTm9kZXMoZmlsdGVyOiBhbnksIGF1dG9TaG93PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2xlYXJGaWx0ZXIoKTogdm9pZDtcbiAgICBtb3ZlTm9kZShub2RlOiBhbnksIHRvOiBhbnkpOiB2b2lkO1xuICAgIGNvcHlOb2RlKG5vZGU6IGFueSwgdG86IGFueSk6IHZvaWQ7XG4gICAgZ2V0U3RhdGUoKToge1xuICAgICAgICBleHBhbmRlZE5vZGVJZHM6IElEVHlwZURpY3Rpb25hcnk7XG4gICAgICAgIHNlbGVjdGVkTGVhZk5vZGVJZHM6IElEVHlwZURpY3Rpb25hcnk7XG4gICAgICAgIGFjdGl2ZU5vZGVJZHM6IElEVHlwZURpY3Rpb25hcnk7XG4gICAgICAgIGhpZGRlbk5vZGVJZHM6IElEVHlwZURpY3Rpb25hcnk7XG4gICAgICAgIGZvY3VzZWROb2RlSWQ6IElEVHlwZTtcbiAgICB9O1xuICAgIHNldFN0YXRlKHN0YXRlOiBhbnkpOiB2b2lkO1xuICAgIHN1YnNjcmliZVRvU3RhdGUoZm46IGFueSk6IHZvaWQ7XG4gICAgY2FuTW92ZU5vZGUobm9kZTogYW55LCB0bzogYW55LCBmcm9tSW5kZXg/OiBhbnkpOiBib29sZWFuO1xuICAgIGNhbGN1bGF0ZUV4cGFuZGVkTm9kZXMoKTogdm9pZDtcbiAgICBwcml2YXRlIF9maWx0ZXJOb2RlO1xuICAgIHByaXZhdGUgX2NhbGN1bGF0ZUV4cGFuZGVkTm9kZXM7XG4gICAgcHJpdmF0ZSBfc2V0QWN0aXZlTm9kZVNpbmdsZTtcbiAgICBwcml2YXRlIF9zZXRBY3RpdmVOb2RlTXVsdGk7XG59XG4iXX0=