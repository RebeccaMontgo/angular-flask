import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
var TreeDraggedElement = /** @class */ (function () {
    function TreeDraggedElement() {
        this._draggedElement = null;
    }
    TreeDraggedElement.prototype.set = function (draggedElement) {
        this._draggedElement = draggedElement;
    };
    TreeDraggedElement.prototype.get = function () {
        return this._draggedElement;
    };
    TreeDraggedElement.prototype.isDragging = function () {
        return !!this.get();
    };
TreeDraggedElement.ɵfac = function TreeDraggedElement_Factory(t) { return new (t || TreeDraggedElement)(); };
TreeDraggedElement.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeDraggedElement, factory: function (t) { return TreeDraggedElement.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeDraggedElement, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return TreeDraggedElement;
}());
export { TreeDraggedElement };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1kcmFnZ2VkLWVsZW1lbnQubW9kZWwuanMiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvdHJlZS1kcmFnZ2VkLWVsZW1lbnQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0M7QUFDb0IsSUFGcEI7QUFDa0IsUUFDaEIsb0JBQWUsR0FBUSxJQUFJLENBQUM7QUFDOUIsSUFZQSxDQUFDO0FBQ0QsSUFaRSxnQ0FBRyxHQUFILFVBQUksY0FBbUI7QUFDekIsUUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztBQUMxQyxJQUFFLENBQUM7QUFFSCxJQUFFLGdDQUFHLEdBQUg7QUFDRCxRQUFHLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNoQyxJQUFFLENBQUM7QUFFSCxJQUFFLHVDQUFVLEdBQVY7QUFBYyxRQUNaLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN4QixJQUFFLENBQUM7SUFiVSxrQkFBa0Isd0JBRDlCLFVBQVUsRUFBRSxRQUNBLGtCQUFrQixDQWM5Qjs7OztnREFDRDtBQUFDLElBREQseUJBQUM7QUFDQSxDQURBLEFBZEQsSUFjQztBQUNELFNBZmEsa0JBQWtCO0FBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHJlZURyYWdnZWRFbGVtZW50IHtcbiAgX2RyYWdnZWRFbGVtZW50OiBhbnkgPSBudWxsO1xuXG4gIHNldChkcmFnZ2VkRWxlbWVudDogYW55KSB7XG4gICAgdGhpcy5fZHJhZ2dlZEVsZW1lbnQgPSBkcmFnZ2VkRWxlbWVudDtcbiAgfVxuXG4gIGdldCgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9kcmFnZ2VkRWxlbWVudDtcbiAgfVxuXG4gIGlzRHJhZ2dpbmcoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5nZXQoKTtcbiAgfVxufVxuIl19