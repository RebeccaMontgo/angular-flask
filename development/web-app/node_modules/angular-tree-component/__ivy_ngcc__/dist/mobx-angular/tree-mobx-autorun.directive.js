import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ViewContainerRef, TemplateRef, Input } from '@angular/core';
import { autorun } from 'mobx';
var TreeMobxAutorunDirective = /** @class */ (function () {
    function TreeMobxAutorunDirective(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.templateBindings = {};
    }
    TreeMobxAutorunDirective.prototype.ngOnInit = function () {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef);
        if (this.dispose) {
            this.dispose();
        }
        if (this.shouldDetach()) {
            this.view.detach();
        }
        this.autoDetect(this.view);
    };
    TreeMobxAutorunDirective.prototype.shouldDetach = function () {
        return this.treeMobxAutorun && this.treeMobxAutorun.detach;
    };
    TreeMobxAutorunDirective.prototype.autoDetect = function (view) {
        this.dispose = autorun(function () { return view.detectChanges(); });
    };
    TreeMobxAutorunDirective.prototype.ngOnDestroy = function () {
        if (this.dispose) {
            this.dispose();
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], TreeMobxAutorunDirective.prototype, "treeMobxAutorun", void 0);
    TreeMobxAutorunDirective = __decorate([ __metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef])
    ], TreeMobxAutorunDirective);
TreeMobxAutorunDirective.ɵfac = function TreeMobxAutorunDirective_Factory(t) { return new (t || TreeMobxAutorunDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
TreeMobxAutorunDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TreeMobxAutorunDirective, selectors: [["", "treeMobxAutorun", ""]], inputs: { treeMobxAutorun: "treeMobxAutorun" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeMobxAutorunDirective, [{
        type: Directive,
        args: [{ selector: '[treeMobxAutorun]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, { treeMobxAutorun: [{
            type: Input
        }] }); })();
    return TreeMobxAutorunDirective;
}());
export { TreeMobxAutorunDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1tb2J4LWF1dG9ydW4uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi9saWIvbW9ieC1hbmd1bGFyL3RyZWUtbW9ieC1hdXRvcnVuLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsV0FBVyxFQUdYLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRy9CO0FBQTRELElBTTFELGtDQUNZLFdBQTZCLEVBQzdCLGFBQStCO0FBQzFDLFFBRlcsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0FBQUMsUUFDOUIsa0JBQWEsR0FBYixhQUFhLENBQWtCO0FBQzdDLFFBUlkscUJBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLElBT0ssQ0FBQztBQUNOLElBQ0UsMkNBQVEsR0FBUjtBQUNELFFBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4RSxRQUNJLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUN0QixZQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixTQUFLO0FBQ0wsUUFDSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRTtBQUM3QixZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDekIsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsSUFBRSxDQUFDO0FBRUgsSUFBRSwrQ0FBWSxHQUFaO0FBQWMsUUFDWixPQUFPLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7QUFDL0QsSUFBRSxDQUFDO0FBRUgsSUFBRSw2Q0FBVSxHQUFWLFVBQVcsSUFBMEI7QUFDdkMsUUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxjQUFNLE9BQUEsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFwQixDQUFvQixDQUFDLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBRUgsSUFBRSw4Q0FBVyxHQUFYO0FBQWMsUUFDWixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdEIsWUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNGLElBakNVO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUU7QUFHRixxRUFIaUI7QUFFM0IsSUFOYSx3QkFBd0Isd0JBRHBDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSwvQkFDZixrQ0FPbUIsV0FBVztHQVJJLEVBQUUsQ0FBQyxOQVFMLFlBQ1gsZ0JBQWdCO0FBQzNDLE9BVFcsd0JBQXdCLENBcUNwQzs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELCtCQUFDO0FBQ0EsQ0FEQSxBQXJDRCxJQXFDQztBQUNELFNBdENhLHdCQUF3QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBUZW1wbGF0ZVJlZixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIElucHV0LFxuICBFbWJlZGRlZFZpZXdSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhdXRvcnVuIH0gZnJvbSAnbW9ieCc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1t0cmVlTW9ieEF1dG9ydW5dJyB9KVxuZXhwb3J0IGNsYXNzIFRyZWVNb2J4QXV0b3J1bkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJvdGVjdGVkIHRlbXBsYXRlQmluZGluZ3MgPSB7fTtcbiAgcHJvdGVjdGVkIGRpc3Bvc2U6IGFueTtcbiAgcHJvdGVjdGVkIHZpZXc6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBASW5wdXQoKSB0cmVlTW9ieEF1dG9ydW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByb3RlY3RlZCB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnZpZXcgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuXG4gICAgaWYgKHRoaXMuZGlzcG9zZSkge1xuICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvdWxkRGV0YWNoKCkpIHtcbiAgICAgIHRoaXMudmlldy5kZXRhY2goKTtcbiAgICB9XG4gICAgdGhpcy5hdXRvRGV0ZWN0KHRoaXMudmlldyk7XG4gIH1cblxuICBzaG91bGREZXRhY2goKSB7XG4gICAgcmV0dXJuIHRoaXMudHJlZU1vYnhBdXRvcnVuICYmIHRoaXMudHJlZU1vYnhBdXRvcnVuLmRldGFjaDtcbiAgfVxuXG4gIGF1dG9EZXRlY3QodmlldzogRW1iZWRkZWRWaWV3UmVmPGFueT4pIHtcbiAgICB0aGlzLmRpc3Bvc2UgPSBhdXRvcnVuKCgpID0+IHZpZXcuZGV0ZWN0Q2hhbmdlcygpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRpc3Bvc2UpIHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxufVxuIl19