import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../mobx-angular/tree-mobx-autorun.directive';

function TreeViewportComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("height", ctx_r0.getTotalHeight());
} }
var _c0 = function () { return { dontDetach: true }; };
var _c1 = ["*"];
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, NgZone } from '@angular/core';
import { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';
import { TREE_EVENTS } from '../constants/events';
import throttle from 'lodash/throttle';
var TreeViewportComponent = /** @class */ (function () {
    function TreeViewportComponent(elementRef, ngZone, virtualScroll) {
        var _this = this;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.virtualScroll = virtualScroll;
        this.setViewport = throttle(function () {
            _this.virtualScroll.setViewport(_this.elementRef.nativeElement);
        }, 17);
        this.scrollEventHandler = this.setViewport.bind(this);
    }
    TreeViewportComponent.prototype.ngOnInit = function () {
        this.virtualScroll.init();
    };
    TreeViewportComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.setViewport();
            _this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });
        });
        var el = this.elementRef.nativeElement;
        this.ngZone.runOutsideAngular(function () {
            el.addEventListener('scroll', _this.scrollEventHandler);
        });
    };
    TreeViewportComponent.prototype.ngOnDestroy = function () {
        this.virtualScroll.clear();
        var el = this.elementRef.nativeElement;
        el.removeEventListener('scroll', this.scrollEventHandler);
    };
    TreeViewportComponent.prototype.getTotalHeight = function () {
        return ((this.virtualScroll.isEnabled() &&
            this.virtualScroll.totalHeight + 'px') ||
            'auto');
    };
    TreeViewportComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
            NgZone,
            TreeVirtualScroll])
    ], TreeViewportComponent);
TreeViewportComponent.ɵfac = function TreeViewportComponent_Factory(t) { return new (t || TreeViewportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TreeVirtualScroll)); };
TreeViewportComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeViewportComponent, selectors: [["tree-viewport"]], features: [ɵngcc0.ɵɵProvidersFeature([TreeVirtualScroll])], ngContentSelectors: _c1, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"]], template: function TreeViewportComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, TreeViewportComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c0));
    } }, directives: [ɵngcc1.TreeMobxAutorunDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewportComponent, [{
        type: Component,
        args: [{
                selector: 'tree-viewport',
                styles: [],
                providers: [TreeVirtualScroll],
                template: "\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.height]=\"getTotalHeight()\">\n        <ng-content></ng-content>\n      </div>\n    </ng-container>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: TreeVirtualScroll }]; }, null); })();
    return TreeViewportComponent;
}());
export { TreeViewportComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3cG9ydC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb21wb25lbnRzL3RyZWUtdmlld3BvcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFLVixNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBY3ZDO0FBQXlELElBTXZELCtCQUNVLFVBQXNCLEVBQ3RCLE1BQWMsRUFDZixhQUFnQztBQUN4QyxRQUpELGlCQU1DO0FBQ0gsUUFOWSxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2hCLGtCQUFhLEdBQWIsYUFBYSxDQUFtQjtBQUMzQyxRQVRFLGdCQUFXLEdBQUcsUUFBUSxDQUFDO0FBQ25CLFlBQUYsS0FBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsRSxRQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNULFFBT0ksSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFELElBQUUsQ0FBQztBQUNILElBQ0Usd0NBQVEsR0FBUjtBQUNELFFBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFFSCxJQUFFLCtDQUFlLEdBQWY7QUFBYyxRQUFkLGlCQVNDO0FBQ0gsUUFUSSxVQUFVLENBQUM7QUFDVCxZQUFBLEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6QixZQUFNLEtBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzNFLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFJLElBQUksRUFBRSxHQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztBQUN4RCxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFDNUIsWUFBQSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzdELFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFFSCxJQUFFLDJDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0IsUUFBSSxJQUFJLEVBQUUsR0FBZ0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7QUFDeEQsUUFBSSxFQUFFLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzlELElBQUUsQ0FBQztBQUVILElBQUUsOENBQWMsR0FBZDtBQUFjLFFBQ1osT0FBTyxDQUNMLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7QUFDckMsWUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDOUMsWUFBTSxNQUFNLENBQ1AsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNGLElBMUNZLHFCQUFxQix3QkFaakMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLDNDQVdKLGtDQU9nQixVQUFVO1lBbEJQLFpBbUIzQixZQUFvQixNQUFNO01BbEJ4QixNQUFNLEVBQUUsRUFBRSxjQUNWLDlCQWtCRixZQUEwQixpQkFBaUI7T0FsQmhDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyw1QkFtQjlCLE9BVlcscUJBQXFCLENBMENqQztXQWxEQyxRQUFRLEVBQUUsMkxBTVQsVUFDRixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7aUlBNENGO0FBQUMsSUFERCw0QkFBQztBQUNBLENBREEsQUExQ0QsSUEwQ0M7QUFDRCxTQTNDYSxxQkFBcUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBOZ1pvbmVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlVmlydHVhbFNjcm9sbCB9IGZyb20gJy4uL21vZGVscy90cmVlLXZpcnR1YWwtc2Nyb2xsLm1vZGVsJztcbmltcG9ydCB7IFRSRUVfRVZFTlRTIH0gZnJvbSAnLi4vY29uc3RhbnRzL2V2ZW50cyc7XG5pbXBvcnQgeyBDYW5jZWxhYmxlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICdsb2Rhc2gvdGhyb3R0bGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0cmVlLXZpZXdwb3J0JyxcbiAgc3R5bGVzOiBbXSxcbiAgcHJvdmlkZXJzOiBbVHJlZVZpcnR1YWxTY3JvbGxdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKnRyZWVNb2J4QXV0b3J1bj1cInsgZG9udERldGFjaDogdHJ1ZSB9XCI+XG4gICAgICA8ZGl2IFtzdHlsZS5oZWlnaHRdPVwiZ2V0VG90YWxIZWlnaHQoKVwiPlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBUcmVlVmlld3BvcnRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHNldFZpZXdwb3J0ID0gdGhyb3R0bGUoKCkgPT4ge1xuICAgIHRoaXMudmlydHVhbFNjcm9sbC5zZXRWaWV3cG9ydCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gIH0sIDE3KTtcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxFdmVudEhhbmRsZXI6ICgkZXZlbnQ6IEV2ZW50KSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHB1YmxpYyB2aXJ0dWFsU2Nyb2xsOiBUcmVlVmlydHVhbFNjcm9sbFxuICApIHtcbiAgICB0aGlzLnNjcm9sbEV2ZW50SGFuZGxlciA9IHRoaXMuc2V0Vmlld3BvcnQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmlydHVhbFNjcm9sbC5pbml0KCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFZpZXdwb3J0KCk7XG4gICAgICB0aGlzLnZpcnR1YWxTY3JvbGwuZmlyZUV2ZW50KHsgZXZlbnROYW1lOiBUUkVFX0VWRU5UUy5pbml0aWFsaXplZCB9KTtcbiAgICB9KTtcbiAgICBsZXQgZWw6IEhUTUxFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5zY3JvbGxFdmVudEhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52aXJ0dWFsU2Nyb2xsLmNsZWFyKCk7XG4gICAgbGV0IGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyKTtcbiAgfVxuXG4gIGdldFRvdGFsSGVpZ2h0KCkge1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy52aXJ0dWFsU2Nyb2xsLmlzRW5hYmxlZCgpICYmXG4gICAgICAgIHRoaXMudmlydHVhbFNjcm9sbC50b3RhbEhlaWdodCArICdweCcpIHx8XG4gICAgICAnYXV0bydcbiAgICApO1xuICB9XG59XG4iXX0=