import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../mobx-angular/tree-mobx-autorun.directive';

function TreeNodeCheckboxComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "input", 1);
    ɵngcc0.ɵɵlistener("click", function TreeNodeCheckboxComponent_ng_container_0_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); var ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.node.mouseAction("checkboxClick", $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("checked", ctx_r0.node.isSelected)("indeterminate", ctx_r0.node.isPartiallySelected);
} }
var _c0 = function () { return { dontDetach: true }; };
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { TreeNode } from '../models/tree-node.model';
var TreeNodeCheckboxComponent = /** @class */ (function () {
    function TreeNodeCheckboxComponent() {
    }
    __decorate([
        Input(),
        __metadata("design:type", TreeNode)
    ], TreeNodeCheckboxComponent.prototype, "node", void 0);
TreeNodeCheckboxComponent.ɵfac = function TreeNodeCheckboxComponent_Factory(t) { return new (t || TreeNodeCheckboxComponent)(); };
TreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeNodeCheckboxComponent, selectors: [["tree-node-checkbox"]], inputs: { node: "node" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], ["type", "checkbox", 1, "tree-node-checkbox", 3, "checked", "indeterminate", "click"]], template: function TreeNodeCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeNodeCheckboxComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c0));
    } }, directives: [ɵngcc1.TreeMobxAutorunDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeNodeCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'tree-node-checkbox',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                template: "\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <input\n        class=\"tree-node-checkbox\"\n        type=\"checkbox\"\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\n        [checked]=\"node.isSelected\"\n        [indeterminate]=\"node.isPartiallySelected\"\n      />\n    </ng-container>\n  "
            }]
    }], function () { return []; }, { node: [{
            type: Input
        }] }); })();
    return TreeNodeCheckboxComponent;
}());
export { TreeNodeCheckboxComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2NvbXBvbmVudHMvdHJlZS1ub2RlLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBa0JyRDtBQUNvQixJQURwQjtBQUF1QyxJQUV2QyxDQUFDO0FBQ0QsSUFGVztBQUFhLFFBQXJCLEtBQUssRUFBRTtBQUFFLGtDQUFLLFFBQVE7QUFDekIsMkRBRDBCO0lBRGIseUJBQXlCLHdCQWhCckMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLG9CQUFvQixjQUM5QjtHQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxjQUNyQyxNQUFNLEVBQUUsRUFBRSxjQUNWLFFBQVEsRUFBRTtrQ0FVVCxVQUNGLENBQUMsUUFDVyx5QkFBeUIsQ0FFckM7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCxnQ0FBQztBQUNBLENBREEsQUFGRCxJQUVDO0FBQ0QsU0FIYSx5QkFBeUI7QUFDckMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS1ub2RlLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndHJlZS1ub2RlLWNoZWNrYm94JyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgc3R5bGVzOiBbXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGFpbmVyICp0cmVlTW9ieEF1dG9ydW49XCJ7IGRvbnREZXRhY2g6IHRydWUgfVwiPlxuICAgICAgPGlucHV0XG4gICAgICAgIGNsYXNzPVwidHJlZS1ub2RlLWNoZWNrYm94XCJcbiAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgKGNsaWNrKT1cIm5vZGUubW91c2VBY3Rpb24oJ2NoZWNrYm94Q2xpY2snLCAkZXZlbnQpXCJcbiAgICAgICAgW2NoZWNrZWRdPVwibm9kZS5pc1NlbGVjdGVkXCJcbiAgICAgICAgW2luZGV0ZXJtaW5hdGVdPVwibm9kZS5pc1BhcnRpYWxseVNlbGVjdGVkXCJcbiAgICAgIC8+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgVHJlZU5vZGVDaGVja2JveENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG5vZGU6IFRyZWVOb2RlO1xufVxuIl19